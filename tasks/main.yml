---
- stat:
    path: "{{ swap_location }}"
  register: swap_file

- include: remove_old_swap.yml
  when: swap_file.stat.exists and swap_file.stat.isreg and (swap_file.stat.size != (swap_size_mb | int * 1024 * 1024))

- stat:
    path: "{{ swap_location }}"
  register: swap_file

- name: Write swap file
  become: yes
  command: |
    {% if swap_use_dd %}
    dd if=/dev/zero of={{ swap_location }} bs=1M count={{ swap_size_mb }}
    {% else %}
    fallocate -l {{ swap_size_mb }}MiB {{ swap_location }}
    {% endif %}
  args:
    creates: "{{ swap_location }}"
  when: not swap_file.stat.exists

- name: Change swap file permissions
  become: yes
  file:
    path: "{{ swap_location }}"
    owner: root
    group: root
    mode: 0600
    state: file

- name: Check swap file type
  become: yes
  command: "file {{ swap_location }}"
  changed_when: false
  register: swapfile

- name: Make swap file
  become: yes
  command: "mkswap {{ swap_location }}"
  when: swapfile.stdout.find('swap file') == -1

- name: Write swap entry in fstab
  become: yes
  mount:
    name: none
    src: "{{ swap_location }}"
    fstype: swap
    opts: sw
    passno: "0" # Quotes are needed *
    dump: "0"
    state: present

# * Quotes are needed becaue else it will be always marked as changed.
#   See this issue for more info: https://github.com/ansible/ansible-modules-core/issues/1868

- name: Mount swap
  become: yes
  command: "swapon {{ swap_location }}"
  when: ansible_swaptotal_mb < 1 or (removed_swap is defined and removed_swap.changed)

- name: Configure the swappiness
  become: yes
  sysctl:
    name: vm.swappiness
    value: "{{ swap_swappiness }}"
    state: present
    reload: yes

- name: Configure the cache pressure
  become: yes
  sysctl:
    name: vm.vfs_cache_pressure
    value: "{{ swap_cache_pressure }}"
    state: present
    reload: yes
